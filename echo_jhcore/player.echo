// The Player Object
// Inherits from $thing, as players are objects in the world.
// This object defines the core behaviors and security for players.

// Define the capabilities that will govern player creation and actions
define capability CreatePlayer(creator);
define capability Move(player);

object $player extends $thing
    property password = ""; // In a real system, this would be hashed
    property connected = false;

    // Override the look verb for players
    verb "look" (this, "at", dobjstr)
        if (dobjstr == this.name || dobjstr == "me")
            caller:tell("You see yourself in a mirror. Looking good!");
        else
            pass(this, "at", dobjstr);
        endif
    endverb

    // A secure move verb that requires a capability
    secure verb "go" (this, direction, "none", "none")
        requires Move(this)

        let current_location = this.location;
        let destination = current_location.(direction);

        if (valid(destination))
            this:move_to(destination);
            // The room's 'on PlayerMoved' handler will take care of announcements
        else
            this:tell("You can't go that way.");
        endif
    endverb

    // A function to handle player connection
    function on_connect()
        this.connected = true;
        this.location:announce(this.name, " has connected.");
        // Grant the player the ability to move when they connect
        grant Move(this) to this;
    endfunction

    // A function to handle player disconnection
    function on_disconnect()
        this.connected = false;
        this.location:announce(this.name, " has disconnected.");
        // Revoke the move capability when they disconnect
        revoke Move(this);
    endfunction

endobject

// A separate object to handle player creation, keeping the logic separate.
object $player_creator
    secure function create_new_player(name, password)
        // Only an object with the CreatePlayer capability can succeed here.
        requires CreatePlayer(this)

        let new_player = create($player);
        new_player.name = name;
        new_player.password = hash_password(password); // Assume hash_password exists

        return new_player;
    endfunction
endobject
