# Dynamic UI Demo for Echo REPL with XML UI
# This demonstrates how to influence the web UI from within the REPL

# Clear the dynamic UI area
ui_clear()

# Add a title
ui_add_text("demo_title", "Interactive Echo REPL Demo", {
    fontSize: "20px",
    fontWeight: "bold",
    marginBottom: "10px"
})

# Create a counter variable
counter = 0

# Add a display for the counter
ui_add_text("counter_display", "Counter: 0", {
    fontSize: "16px",
    marginBottom: "10px"
})

# Add buttons to increment/decrement
ui_add_button("inc_button", "Increment", lambda() {
    counter = counter + 1;
    ui_update("counter_display", { text: "Counter: " + str(counter) });
    print("Counter incremented to " + str(counter));
})

ui_add_button("dec_button", "Decrement", lambda() {
    counter = counter - 1;
    ui_update("counter_display", { text: "Counter: " + str(counter) });
    print("Counter decremented to " + str(counter));
})

# Add a separator
ui_add_divider("sep1")

# Create an object and bind UI to its properties
obj = create_object("demo_object", {
    name: "Demo Object",
    status: "active",
    value: 42
})

# Add a form to edit the object
ui_add_form("object_editor", {
    title: "Edit Demo Object",
    fields: [
        { name: "name", type: "text", label: "Name" },
        { name: "status", type: "select", label: "Status", 
          options: ["active", "inactive", "pending"] },
        { name: "value", type: "number", label: "Value" }
    ],
    onSubmit: lambda(data) {
        obj.name = data.name;
        obj.status = data.status;
        obj.value = data.value;
        ui_update("object_display", { 
            text: "Object: " + obj.name + " (" + obj.status + ") = " + str(obj.value) 
        });
        print("Object updated: " + obj.name);
    }
})

# Display current object state
ui_add_text("object_display", 
    "Object: " + obj.name + " (" + obj.status + ") = " + str(obj.value), {
    fontSize: "14px",
    fontStyle: "italic",
    marginTop: "10px"
})

# Add another separator
ui_add_divider("sep2")

# Create a simple chart showing some data
data = [10, 25, 15, 30, 20]
ui_add_chart("data_chart", {
    type: "bar",
    data: {
        labels: ["Mon", "Tue", "Wed", "Thu", "Fri"],
        values: data
    },
    title: "Weekly Activity",
    height: "200px"
})

# Add a button to randomize the chart data
ui_add_button("randomize_button", "Randomize Chart", lambda() {
    data = [random(50), random(50), random(50), random(50), random(50)];
    ui_update_chart("data_chart", {
        data: {
            labels: ["Mon", "Tue", "Wed", "Thu", "Fri"],
            values: data
        }
    });
    print("Chart data randomized");
})

# Event-driven UI updates
on_event("player_action", lambda(event) {
    ui_add_text("event_" + str(time()), 
        "Event: " + event.player + " performed " + event.action, {
        fontSize: "12px",
        color: "blue",
        marginTop: "5px"
    });
})

print("Dynamic UI demo loaded! The web interface should now show interactive elements.")
print("Try clicking the buttons or submitting the form to see live updates.")