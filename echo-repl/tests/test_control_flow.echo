// Control Flow Tests

run_tests("Control Flow")

// Test 1: If/Else statements
test("If/Else statements", fn {}
  let result = if true "yes" else "no" endif
  assert_eq(result, "yes", "If with true condition")
  
  result = if false "yes" else "no" endif
  assert_eq(result, "no", "If with false condition")
  
  // Nested if
  let x = 10
  result = if x > 5
    if x > 15
      "very big"
    else
      "medium"
    endif
  else
    "small"
  endif
  assert_eq(result, "medium", "Nested if statements")
endfn)

// Test 2: While loops
test("While loops", fn {}
  let count = 0
  let sum = 0
  while count < 5
    sum = sum + count
    count = count + 1
  endwhile
  assert_eq(sum, 10, "0+1+2+3+4 = 10")
  assert_eq(count, 5, "Loop should run 5 times")
endfn)

// Test 3: For loops
test("For loops", fn {}
  let sum = 0
  for i in [1, 2, 3, 4, 5]
    sum = sum + i
  endfor
  assert_eq(sum, 15, "Sum of [1,2,3,4,5] = 15")
  
  // For with string
  let result = ""
  for c in "ABC"
    result = result + c + "-"
  endfor
  assert_eq(result, "A-B-C-", "String iteration")
endfn)

// Test 4: Break statements
test("Break statements", fn {}
  let count = 0
  while true
    count = count + 1
    if count == 3
      break
    endif
  endwhile
  assert_eq(count, 3, "Break should exit loop at 3")
  
  // Break in for loop
  let sum = 0
  for i in [1, 2, 3, 4, 5]
    if i == 4
      break
    endif
    sum = sum + i
  endfor
  assert_eq(sum, 6, "1+2+3 = 6 (break before 4)")
endfn)

// Test 5: Continue statements
test("Continue statements", fn {}
  let sum = 0
  let i = 0
  while i < 5
    i = i + 1
    if i == 3
      continue
    endif
    sum = sum + i
  endwhile
  assert_eq(sum, 12, "1+2+4+5 = 12 (skip 3)")
  
  // Continue in for loop
  sum = 0
  for j in [1, 2, 3, 4, 5]
    if j == 3
      continue
    endif
    sum = sum + j
  endfor
  assert_eq(sum, 12, "For loop with continue")
endfn)

// Test 6: Nested loops with break/continue
test("Nested loops", fn {}
  let outer_count = 0
  let inner_sum = 0
  
  while outer_count < 3
    outer_count = outer_count + 1
    let inner = 0
    while inner < 5
      inner = inner + 1
      if inner == 3
        continue
      endif
      if inner == 4
        break
      endif
      inner_sum = inner_sum + inner
    endwhile
  endwhile
  
  assert_eq(outer_count, 3, "Outer loop runs 3 times")
  assert_eq(inner_sum, 9, "3 * (1+2) = 9")
endfn)

// Test 7: Logical operators
test("Logical operators", fn {}
  assert_true(true && true, "true AND true")
  assert_false(true && false, "true AND false")
  assert_true(true || false, "true OR false")
  assert_false(false || false, "false OR false")
  assert_true(!false, "NOT false")
  assert_false(!true, "NOT true")
  
  // Short-circuit evaluation
  let x = 0
  let result = false && (x = 1) == 1
  assert_false(result, "Short-circuit AND")
  assert_eq(x, 0, "Right side should not execute")
  
  result = true || (x = 1) == 1
  assert_true(result, "Short-circuit OR")
  assert_eq(x, 0, "Right side should not execute")
endfn)

// Test 8: Comparison operators
test("Comparison operators", fn {}
  assert_true(5 > 3, "5 > 3")
  assert_false(3 > 5, "3 > 5")
  assert_true(5 >= 5, "5 >= 5")
  assert_true(3 < 5, "3 < 5")
  assert_true(5 <= 5, "5 <= 5")
  assert_true(5 == 5, "5 == 5")
  assert_false(5 == 3, "5 == 3")
  assert_true(5 != 3, "5 != 3")
  assert_false(5 != 5, "5 != 5")
endfn)

test_summary()