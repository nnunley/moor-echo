// Echo Language Sanity Test Suite
// Tests all major language features

// Test 1: Basic arithmetic and variables
let x = 10
let y = 20
let sum = x + y
// Note: We'll check all results at the end instead of using error()

// Test 2: String operations
let greeting = "Hello"
let name = "Echo"
let message = greeting + ", " + name + "!"
if message != "Hello, Echo!"
    error("String concatenation failed")
endif

// Test 3: Object creation and properties
object test_obj
    property count = 0
    property name = "Test Object"
    
    verb increment {}
        this.count = this.count + 1
        return this.count
    endverb
    
    verb get_info {}
        return this.name + " (count: " + this.count + ")"
    endverb
endobject

// Test 4: Verb execution
let result = #0.test_obj:increment()
if result != 1
    error("Verb execution failed")
endif

result = #0.test_obj:increment()
if result != 2
    error("Verb state persistence failed")
endif

// Test 5: Verb with parameters
object calculator
    verb add {a, b}
        return a + b
    endverb
    
    verb multiply {x, y, ?times = 1}
        let result = x * y
        for i in range(1, times)
            result = result * y
        endfor
        return result
    endverb
endobject

if #0.calculator:add(5, 3) != 8
    error("Verb with parameters failed")
endif

if #0.calculator:multiply(3, 4) != 12
    error("Verb with default parameter failed")
endif

if #0.calculator:multiply(2, 3, 2) != 18
    error("Verb with optional parameter failed")
endif

// Test 6: Lambda functions
let adder = fn {x, y} x + y endfn
if adder(7, 8) != 15
    error("Lambda function failed")
endif

// Test 7: Control flow - if/else
let test_value = 42
if test_value < 40
    error("If condition wrong branch")
else
    // Correct branch
    let branch_test = true
endif

// Test 8: Loops
let loop_sum = 0
for i in [1, 2, 3, 4, 5]
    loop_sum = loop_sum + i
endfor
if loop_sum != 15
    error("For loop failed")
endif

let while_count = 0
while while_count < 5
    while_count = while_count + 1
endwhile
if while_count != 5
    error("While loop failed")
endif

// Test 9: List operations
let numbers = [10, 20, 30]
if numbers[0] != 10
    error("List indexing failed")
endif

// Test 10: Object reference mapping
#0.object_map = {"100": #0.test_obj, "200": #0.calculator}

// Now #100 should resolve to test_obj
if #100.name != "Test Object"
    error("Object reference mapping failed")
endif

if #200:add(1, 1) != 2
    error("Object reference verb call failed")
endif

// Test 11: Property access via system properties
$test_global = "Global Value"
if $test_global != "Global Value"
    error("System property failed")
endif

// Test 12: Const variables
const PI = 3.14159
if PI != 3.14159
    error("Const variable failed")
endif

// Test 13: Nested property access
object outer
    property inner = #0.test_obj
endobject

if #0.outer.inner.name != "Test Object"
    error("Nested property access failed")
endif

// Test 14: Complex expressions
let complex = (10 + 5) * 2 - 3
if complex != 27
    error("Complex expression failed")
endif

// Test 15: Boolean logic
let a = true
let b = false
if !(a && !b)
    error("Boolean logic failed")
endif

// Test 16: Comparison operators
if !(5 < 10 && 10 <= 10 && 15 > 10 && 20 >= 20)
    error("Comparison operators failed")
endif

// Test 17: Break and continue
let break_test = 0
for i in [1, 2, 3, 4, 5]
    if i == 3
        break
    endif
    break_test = break_test + i
endfor
if break_test != 3  // 1 + 2
    error("Break statement failed")
endif

let continue_test = 0
for i in [1, 2, 3, 4, 5]
    if i == 3
        continue
    endif
    continue_test = continue_test + i
endfor
if continue_test != 12  // 1 + 2 + 4 + 5
    error("Continue statement failed")
endif

// Test 18: Verb calling verb
object chain_test
    verb first {}
        return this:second(5)
    endverb
    
    verb second {n}
        return n * 2
    endverb
endobject

if #0.chain_test:first() != 10
    error("Verb calling verb failed")
endif

// Test 19: Player creation and management
// Note: This would need to be tested separately in REPL
// as it requires player context

// Test 20: Return statement in verb
object return_test
    verb early_return {n}
        if n < 0
            return "negative"
        endif
        if n == 0
            return "zero"
        endif
        return "positive"
    endverb
endobject

if #0.return_test:early_return(-5) != "negative"
    error("Early return failed")
endif

if #0.return_test:early_return(0) != "zero"
    error("Zero return failed")
endif

if #0.return_test:early_return(10) != "positive"
    error("Positive return failed")
endif

// If we get here, all tests passed!
"All sanity tests passed!"