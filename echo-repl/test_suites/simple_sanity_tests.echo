// Echo Language Simple Sanity Test Suite
// Tests major language features without relying on unimplemented functions

// Collect test results
let test_results = []

// Test 1: Basic arithmetic and variables
let x = 10
let y = 20
let sum = x + y
test_results = test_results + [sum == 30]

// Test 2: String operations
let greeting = "Hello"
let name = "Echo"
let message = greeting + ", " + name + "!"
test_results = test_results + [message == "Hello, Echo!"]

// Test 3: Object creation and properties
object test_obj
    property count = 0
    property name = "Test Object"
    
    verb increment {}
        this.count = this.count + 1
        return this.count
    endverb
    
    verb get_info {}
        return this.name + " (count: " + this.count + ")"
    endverb
endobject

// Test 4: Verb execution
let result = #0.test_obj:increment()
test_results = test_results + [result == 1]

result = #0.test_obj:increment()
test_results = test_results + [result == 2]

// Test 5: Verb with parameters
object calculator
    verb add {a, b}
        return a + b
    endverb
    
    verb multiply {x, y, ?times = 1}
        let result = x * y
        let i = 1
        while i < times
            result = result * y
            i = i + 1
        endwhile
        return result
    endverb
endobject

test_results = test_results + [#0.calculator:add(5, 3) == 8]
test_results = test_results + [#0.calculator:multiply(3, 4) == 12]
test_results = test_results + [#0.calculator:multiply(2, 3, 2) == 18]

// Test 6: Lambda functions
let adder = fn {x, y} x + y endfn
test_results = test_results + [adder(7, 8) == 15]

// Test 7: Control flow - if/else
let test_value = 42
let branch_test = false
if test_value < 40
    branch_test = false
else
    branch_test = true
endif
test_results = test_results + [branch_test == true]

// Test 8: Loops
let loop_sum = 0
for i in [1, 2, 3, 4, 5]
    loop_sum = loop_sum + i
endfor
test_results = test_results + [loop_sum == 15]

let while_count = 0
while while_count < 5
    while_count = while_count + 1
endwhile
test_results = test_results + [while_count == 5]

// Test 9: List operations
let numbers = [10, 20, 30]
test_results = test_results + [numbers[0] == 10]

// Test 10: Object reference mapping
#0.object_map = {"100": #0.test_obj, "200": #0.calculator}

// Now #100 should resolve to test_obj
test_results = test_results + [#100.name == "Test Object"]
test_results = test_results + [#200:add(1, 1) == 2]

// Test 11: Property access via system properties
$test_global = "Global Value"
test_results = test_results + [$test_global == "Global Value"]

// Test 12: Const variables
const PI = 3.14159
test_results = test_results + [PI == 3.14159]

// Test 13: Nested property access
object outer
    property inner = #0.test_obj
endobject

test_results = test_results + [#0.outer.inner.name == "Test Object"]

// Test 14: Complex expressions
let complex = (10 + 5) * 2 - 3
test_results = test_results + [complex == 27]

// Test 15: Boolean logic
let a = true
let b = false
test_results = test_results + [a && !b]

// Test 16: Comparison operators
test_results = test_results + [5 < 10 && 10 <= 10 && 15 > 10 && 20 >= 20]

// Test 17: Break
let break_test = 0
for i in [1, 2, 3, 4, 5]
    if i == 3
        break
    endif
    break_test = break_test + i
endfor
test_results = test_results + [break_test == 3]

// Test 18: Continue
let continue_test = 0
for i in [1, 2, 3, 4, 5]
    if i == 3
        continue
    endif
    continue_test = continue_test + i
endfor
test_results = test_results + [continue_test == 12]

// Test 19: Verb calling verb
object chain_test
    verb first {}
        return this:second(5)
    endverb
    
    verb second {n}
        return n * 2
    endverb
endobject

test_results = test_results + [#0.chain_test:first() == 10]

// Test 20: Return statement in verb
object return_test
    verb early_return {n}
        if n < 0
            return "negative"
        endif
        if n == 0
            return "zero"
        endif
        return "positive"
    endverb
endobject

test_results = test_results + [#0.return_test:early_return(-5) == "negative"]
test_results = test_results + [#0.return_test:early_return(0) == "zero"]
test_results = test_results + [#0.return_test:early_return(10) == "positive"]

// Check if all tests passed
let all_passed = true
let test_count = 0
for result in test_results
    test_count = test_count + 1
    if !result
        all_passed = false
    endif
endfor

// Return the final result
if all_passed
    "All " + test_count + " tests passed!"
else
    "Some tests failed"
endif