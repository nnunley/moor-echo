name: Workspace CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_REGISTRY_CACHE_TAG: v1
  CARGO_INCREMENTAL: 0

jobs:
  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Prettier
        run: npm install -g prettier

      - name: Check JSON/YAML/Markdown formatting
        run: |
          prettier --check "**/*.{json,yml,yaml,md}" \
            --ignore-path .gitignore \
            --ignore-path .prettierignore

  lint:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}
          cache-on-failure: true

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}-${{ matrix.os }}-${{ matrix.rust }}
          cache-on-failure: true

      - name: Build workspace
        run: cargo build --workspace --all-features --verbose

      - name: Run unit tests
        run: cargo test --workspace --all-features --verbose --lib

      - name: Run integration tests
        run: cargo test --workspace --all-features --verbose --tests

      - name: Run doc tests
        run: cargo test --workspace --all-features --verbose --doc

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}-coverage

      - name: Install tarpaulin
        run: |
          cargo install cargo-tarpaulin --version 0.27.0 \
            --no-default-features --features html \
            --locked || true

      - name: Generate coverage
        run: |
          cargo tarpaulin --verbose \
            --all-features \
            --workspace \
            --timeout 300 \
            --out xml \
            --out html \
            --exclude-files "*/tests/*" \
            --exclude-files "*/examples/*" \
            --exclude-files "*/build.rs"

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tarpaulin-report.html

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Security audit
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependency review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

  miri:
    name: Miri Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust with Miri
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - name: Run Miri tests
        run: |
          cargo miri setup
          cargo miri test --workspace --exclude echo-web
        env:
          MIRIFLAGS: -Zmiri-disable-isolation

  tree-sitter:
    name: Tree-sitter Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Run tree-sitter tests
        run: npx tree-sitter test

      - name: Build WASM
        run: npx tree-sitter build --wasm

  python-tests:
    name: Python Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt || true
          pip install pytest pytest-cov black ruff

      - name: Run Python linting
        run: |
          black --check echo-repl/run_echo_tests.py || true
          ruff check echo-repl/run_echo_tests.py || true

      - name: Run Python tests
        run: |
          cd echo-repl
          python run_echo_tests.py || true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}-docs

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc

  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}-bench

      - name: Run benchmarks
        run: cargo bench --workspace --all-features

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: moor-echo:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            RUST_VERSION=1.75

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.CARGO_REGISTRY_CACHE_TAG }}-integration

      - name: Build all binaries
        run: cargo build --workspace --all-features --release

      - name: Run echo test suite
        run: |
          cd echo-repl
          ./test.sh || true

      - name: Run hermetic tests
        run: |
          cd echo-repl
          ./test_hermetic.sh || true
